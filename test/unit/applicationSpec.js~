'use strict';

/* jasmine specs for services/controllers go here */

var havermout = {"id": "1", "name": "havermout", "quantity": "100", "c": 367, "e": 13, "k": 62, "v": 7};
var kwark = {"id": "2", "name": "kwark, mager", "quantity": "100", "c": 60, "e": 11, "k": 3, "v": 0};
var banaan = {"id": "3", "name": "banaan", "quantity": "medium", "c": 121, "e": 1.5, "k": 31, "v": 0.5};
var foods = [havermout, kwark, banaan];

describe('foodsModel', function() {

  beforeEach(module('nutritionTrackerApp'));

  describe('when findFoods without a filter', function() {
    it('should return all foods', inject(function(foodsModel) {
    	foodsModel.foods = foods;
		expect(foodsModel.findFoods().length).toBe(3);
    }));
  });

  describe('when addFood', function() {
      it('should add a food to foods', inject(function(foodsModel) {
      	var originalAmount = foodsModel.foods.length;
      	var nieuwEten = {"name": "nieuw eten", "quantity": "100", "c": 465, "e": 13.2, "k": 8.9, "v": 7.0};
      	foodsModel.addFood(nieuwEten);
      	expect(foodsModel.foods.length).toBe(originalAmount + 1);
      	expect(nieuwEten.id).not.toBeNull();
      }));
  });
  describe('when createTotals', function() {
    it('should return totals per group', inject(function(foodsModel) {
    	foodsModel.eatenFoods = [];
    	foodsModel.selectedDate = new Date();
    	foodsModel.addEatenFood(havermout);
    	foodsModel.addEatenFood(kwark);
    	foodsModel.addEatenFood(banaan);
    	foodsModel.createTotals();
		expect(foodsModel.totals.c).toBe(548);
		expect(foodsModel.totals.e).toBe(25.5);
		expect(foodsModel.totals.k).toBe(96);
		expect(foodsModel.totals.v).toBe(7.5);
    }));
  });
  describe('when addEatenFood', function() {
    it('should add a food to eatenFoods model', inject(function(foodsModel) {
    	foodsModel.addEatenFood(havermout);
    	expect(foodsModel.eatenFoods.length).toBe(1);
    }));
    it('should add a unique uuid to any added food', inject(function(foodsModel) {
       	foodsModel.addEatenFood(havermout);
       	foodsModel.addEatenFood(kwark);
       	expect(foodsModel.eatenFoods[0].uuid).toBeDefined();
       	expect(foodsModel.eatenFoods[0].uuid.length).toBe(36);
       	expect(foodsModel.eatenFoods[0].uuid).not.toEqual(foodsModel.eatenFoods[1].uuid);
  	}));
  	it('should add a datum to any added food', inject(function(foodsModel) {
       	foodsModel.addEatenFood(havermout);
      	expect(foodsModel.eatenFoods[0].datum).toBeDefined();      	
      	expect(foodsModel.eatenFoods[0].datum.length).toEqual(foodsModel.selectedDate);
    }));
  });
  describe('when removeEatenFood', function() {
	it('should remove a food from eatenFoods model', inject(function(foodsModel) {
       	foodsModel.addEatenFood(havermout);
        foodsModel.addEatenFood(kwark);
        expect(foodsModel.eatenFoods.length).toBe(2);
        foodsModel.removeEatenFood(havermout);
        expect(foodsModel.eatenFoods.length).toBe(1);
   	}));
  });
  describe('when createSequenceId', function() {
  	it('should return the next sequence id in the list', inject(function(foodsModel) {
          foodsModel.foods = foods;
          var nextId = foodsModel.createSequenceId();
          expect(nextId).toBe(4);
     	}));
    });
});

// test controller with a spy/mock service to see if required interaction with a modelservice is made

describe('eatenFoodsController', function() {
	var scope, foodsModel;

	beforeEach(module('nutritionTrackerApp'));
	beforeEach(inject(function($rootScope, $controller) {
		scope = $rootScope.$new();
		$controller('eatenFoodsController', {$scope: scope});
	}));

	describe('when addEatenFood', function() {
        it('should call foodsModel.addEatenFood', inject(function(foodsModel) {
        	spyOn(foodsModel, 'addEatenFood');
        	scope.addEatenFood(havermout);
        	expect(foodsModel.addEatenFood).toHaveBeenCalled();
		}));
    });

    describe('when removeEatenFood', function() {
        it('should call foodsModel.removeEatenFood', inject(function(foodsModel) {
        	spyOn(foodsModel, 'removeEatenFood');
        	scope.addEatenFood(havermout);
        	scope.addEatenFood(kwark);
        	scope.removeEatenFood(havermout);
        	expect(foodsModel.removeEatenFood).toHaveBeenCalled();
    	}));
    });
});

describe('dateSelectionController', function() {
	var scope;

	beforeEach(module('nutritionTrackerApp'));
	beforeEach(inject(function($rootScope, $controller) {
		scope = $rootScope.$new();
		$controller('dateSelectionController', {$scope: scope});
	}));

	describe('when constructing', function() {
		it('should set the selectedDate as today', function() {
			var day = (new Date()).getDate();
        	expect(scope.selectedDate.getDate()).toEqual(day);
    	});
    });

	describe('when selectDayBefore', function() {
        it('should set the day before selectedDate as selectedDate', function() {
        	var day = new Date();
        	day.setDate(day.getDate() - 1);
        	var yesterday = day.getDate();
        	scope.selectDayBefore();
            expect(scope.selectedDate.getDate()).toEqual(yesterday);
		});
    });

    describe('when selectDayAfter', function() {
        it('should set the day after selectedDate as selectedDate', function() {
           	var day = new Date();
            day.setDate(day.getDate() + 1);
            var tomorrow = day.getDate();
          	scope.selectDayAfter();
            expect(scope.selectedDate.getDate()).toEqual(tomorrow);
    	});
    });

    describe('when selectToday', function() {
        it('should set today as selectedDate', function() {
        	var day = (new Date()).getDate();
           	scope.selectToday();
            expect(scope.selectedDate.getDate()).toEqual(day);
       	});
     });
});

